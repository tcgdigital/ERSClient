{
    "extends": [
        "tslint:recommended"
    ],
    "rulesDirectory": [
        "node_modules/codelyzer"
    ],
    "rules": {
        /*Requires explicit visibility declarations for class members.*/
        "member-access": false,
        /*Enforces member ordering.*/
        "member-ordering": [
            true,
            "public-before-private",
            "static-before-instance",
            "variables-before-functions"
        ],
        /*Diallows usages of any as a type declaration.*/
        "no-any": false,
        /*Disallows explicit type declarations for variables or parameters 
        initialized to a number, string, or boolean.*/
        "no-inferrable-types": false,
        /*Disallows internal module*/
        "no-internal-module": true,
        /*Disallows the use of require statements except in import statements.*/
        "no-var-requires": false,
        /*Requires type definitions to exist.*/
        "typedef": false,
        /*Requires that import statements be alphabetized.*/
        "ordered-imports": false,
        /*Requires or disallows whitespace for type definitions.*/
        "typedef-whitespace": [
            true,
            {
                "call-signature": "nospace",
                "index-signature": "nospace",
                "parameter": "nospace",
                "property-declaration": "nospace",
                "variable-declaration": "nospace"
            },
            {
                "call-signature": "space",
                "index-signature": "space",
                "parameter": "space",
                "property-declaration": "space",
                "variable-declaration": "space"
            }
        ],
        /*Bans the use of specific functions or global methods.*/
        "ban": false,
        /*Enforces braces for if/for/do/while statements.*/
        "curly": false,
        /*Requires a for ... in statement to be filtered with an if statement.*/
        "forin": true,
        /*Only allows labels in sensible locations.*/
        "label-position": true,
        /*Disallows use of arguments.callee.*/
        "no-arg": true,
        /*Disallows bitwise operators.*/
        "no-bitwise": false,
        /*Disallows any type of assignment in conditionals.*/
        "no-conditional-assignment": true,
        /*Bans the use of specified console methods.*/
        "no-console": [
            true,
            "debug",
            "info",
            "time",
            "timeEnd",
            "trace"
        ],
        /*Disallows access to the constructors of String, Number, and Boolean.*/
        "no-construct": true,
        /*Disallows debugger statements.*/
        "no-debugger": false,
        //"no-duplicate-key": true,
        /*Disallows duplicate variable declarations in the same block scope.*/
        "no-duplicate-variable": true,
        /*Disallows empty blocks.*/
        "no-empty": true,
        /*Disallows eval function invocations.*/
        "no-eval": true,
        /*Disallows use of the null keyword literal.*/
        "no-null-keyword": false,
        /*Disallows shadowing variable declarations.*/
        "no-shadowed-variable": true,
        /*Disallows object access via string literals.*/
        "no-string-literal": false,
        /*Disallows falling through case statements.*/
        "no-switch-case-fall-through": true,
        //"no-unreachable": true,
        /*Disallows unused expression statements.*/
        "no-unused-expression": true,
        /*Disallows unused imports, variables, functions and private class members.*/
        "no-unused-variable": true,
        /*Disallows usage of variables before their declaration.*/
        "no-use-before-declare": true,
        /*Disallows usage of the var keyword.*/
        "no-var-keyword": true,
        /*Requires the radix parameter to be specified when calling parseInt.*/
        "radix": true,
        /*Require a default case in all switch statements.*/
        "switch-default": true,
        /*Requires === and !== in place of == and !=*/
        "triple-equals": [
            true,
            "allow-null-check"
        ],
        /*Ensures the file ends with a newline.*/
        "eofline": false,
        "max-classes-per-file": [
            false
        ],
        /*Enforces indentation with tabs or spaces.*/
        // "indent": [
        //     true,
        //     "tabs"
        // ],
        /*Requires lines to be under a certain max length.*/
        "max-line-length": false,
        // "max-line-length": [
        //     true,
        //     150
        // ],
        /*Disallows invocation of require().*/
        "no-require-imports": false,
        /*Disallows trailing whitespace at the end of a line.*/
        "no-trailing-whitespace": true,
        /*Requires keys in object literals to be sorted alphabetically*/
        "object-literal-sort-keys": false,
        /*Requires or disallows trailing commas in array and object literals, destructuring assignments, 
        function and tuple typings, named imports and function parameters.*/
        "trailing-comma": [
            true,
            {
                "multiline": false,
                "singleline": "never"
            }
        ],
        /*Enforces vertical alignment.*/
        "align": false,
        /*Enforces PascalCased class and interface names.*/
        "class-name": true,
        /*Enforces formatting rules for single-line comments*/
        "comment-format": [
            true,
            "check-space"
        ],
        /*Requires interface names to begin with a capital ‘I’*/
        "interface-name": [
            false,
            "always-prefix"
        ],
        /*Enforces basic format rules for JSDoc comments.*/
        //"jsdoc-format": true,
        /*Disallows one or more blank lines in a row.*/
        "no-consecutive-blank-lines": false,
        /*Requires the specified tokens to be on the same line as the expression preceding them.*/
        "one-line": [
            false,
            "check-open-brace",
            "check-catch",
            "check-else",
            "check-finally",
            "check-whitespace"
        ],
        /*Requires single or double quotes for string literals.
        "avoid-escape" allows you to use the “other” quotemark in cases where escaping would normally be required. 
        For example, [true, "double", "avoid-escape"] would not report a failure on the string literal 'Hello "World"'*/
        "quotemark": [
            true,
            "single",
            "avoid-escape"
        ],
        /*Enforces consistent semicolon usage at the end of every statement.*/
        "semicolon": [
            true,
            "always"
        ],
        /*Checks variable names for various errors.*/
        "variable-name": [
            true,
            "allow-leading-underscore",
            "allow-pascal-case",
            "ban-keywords"
            // "check-format"
        ],
        /*Enforces whitespace style conventions.*/
        "whitespace": [
            true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ],
        /*****Angular 2 specific rules*****/
        "component-class-suffix": true,
        "directive-class-suffix": true,
        // "component-selector": [
        //   true,
        //   "element",
        //   "my",
        //   "kebab-case"
        // ],
        // "directive-selector": [
        //   true,
        //   "attribute",
        //   "my",
        //   "camelCase"
        // ],
        /*Enforces to use the @Input property decorator instead of the inputs property in @Component*/
        "use-input-property-decorator": true,
        /*Enforces to use the @Output property decorator instead of the inputs property in @Component*/
        "use-output-property-decorator": true,
        /*Enforces to use @HostBindings and @HostListeners instead of the host property in @Component*/
        "use-host-property-decorator": true,
        /*Enforces to implement lifecycle hook interface OnInit for method ngOnInit in class App*/
        "use-life-cycle-interface": false,
        /*The NewPipe class has the Pipe decorator, so it should implement the PipeTransform interface*/
        "use-pipe-transform-interface": true,
        /*The property "foo" that you\'re trying to access does not exist in the class declaration.*/
        "no-access-missing-member": true,
        /*In the constructor of class "ButtonComponent", the parameter "label" uses the @Attribute decorator,
        which is considered as a bad practice. Please, consider construction of type "@Input() label: string*/
        "no-attribute-parameter-decorator": true,
        /*should fail when we are calling forwardRef in constructor or in in Component directives array or in variable*/
        "no-forward-ref": true,
        /*In the class "ButtonComponent", the directive input property "label" should not be renamed.
        Please, consider the following use "@Input() label: string"*/
        "no-input-rename": true,
        /*In the class "ButtonComponent", the directive output property "change" should not be renamed.
        Please, consider the following use "@Output() change = new EventEmitter();"*/
        "no-output-rename": true,
        /*You need to leave whitespaces inside of the import statement\'s curly braces*/
        "import-destructuring-spacing": true,
        /*should fail when injectable is not invoked. You have to invoke @Injectable()*/
        "invoke-injectable": true,
        /*The name of the Pipe decorator of class Test should be named camelCase with prefix ng, however its value is "foo-bar".*/
        "pipe-naming": [
            true,
            "camelCase",
            "my"
        ],
        "templates-use-public": true
    }
}